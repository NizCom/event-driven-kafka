version: '3.8'

services:
  cart-service-app:
    image: niznaor/cart-service:latest
    container_name: cart-service
    ports:
      - "5000:5000"
    depends_on:
      - kafka
    environment:
      FLASK_APP: main.py
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_RUN_PORT: 5000
    networks:
      - kafka_network

  order-service-app:
    image: niznaor/order-service:latest
    container_name: order-service
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      FLASK_APP: main.py
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_RUN_PORT: 8080
    networks:
      - kafka_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    command:
      - sh
      - -c
      - |
        # Start Kafka in the background
        /etc/confluent/docker/run &
        # Wait for Kafka to be ready
        echo "Waiting for Kafka to start..."
        while ! nc -z localhost 9092; do
          sleep 1
        done
        # Create the 'orders' topic
        kafka-topics --create --topic orders --bootstrap-server localhost:9092 --replication-factor 1 --partitions 3
        # Create the 'dead_letter_queue' topic
        kafka-topics --create --topic dead_letter_queue --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1
        # Keep the container running
        wait
    networks:
      - kafka_network

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - kafka_network

volumes:
  mongodb_data:

networks:
  kafka_network:
    driver: bridge